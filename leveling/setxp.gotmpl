{{/*
	-setxp <user> <xp>
	-setlevel <user> <level>

	Trigger:  `^-(set-?(xp|level))`
*/}}
{{ $cmd := reFind `(?i)xp|level` .Cmd }} 
{{ $user := 0 }} 
{{ $newLvl := 0 }} 

{{ with .CmdArgs }} {{ $user = index . 0 | userArg }} {{ end }} 
{{ if and (eq $cmd "level") (eq (len .CmdArgs) 2) }}
	{{ $level := $.nil }}
	{{ $valid := false }}
	{{ with reFind `\A\d+\z` (index .CmdArgs 1) }} {{ $valid = true }} {{ $level = toInt . }} {{ end }}
	{{ if and $valid $user }}
		{{ $calculated := mult 100 (mult $level $level) }} 
		{{ $s := dbSet $user.ID "xp" $calculated }} 
		{{ $newLvl = $level }} 
		{{ printf "Successfully set **%s**'s level to %d!" $user.String $level }}
	{{ else }}
		Cú pháp của lệnh là `-setlevel <user> <level>`. 
	{{ end }}

{{ else if eq (len .CmdArgs) 2 }}
	{{ $xp := $.nil }}
	{{ $valid := false }}
	{{ with reFind `\A\d+\z` (index .CmdArgs 1) }} {{ $valid = true }} {{ $xp = toInt . }} {{ end }}
	{{ if and $valid $user }}
		{{ $oldXp := 0 }} 
		{{ with (dbGet $user.ID "xp") }} {{ $oldXp = .Value }} {{ end }}
		{{ $oldLvl := roundFloor (mult 0.1 (sqrt $oldXp)) }} 
		{{ $s := dbSet $user.ID "xp" $xp }} 
		{{ $updatedLvl := roundFloor (mult 0.1 (sqrt $xp)) }} 
		{{ if ne $oldLvl $updatedLvl }} {{ $newLvl = $updatedLvl }} {{ end }} 
		{{ printf "Successfully set **%s**'s XP to %d!" $user.String $xp }}
	{{else}}
		Cú pháp của lệnh là `-setxp <user> <xp>`.
	{{end}}
{{else}}
	Cú pháp của lệnh là `-setxp/setlevel <user> <level|xp>`.
{{end}}

{{if $newLvl}}
	{{ $roleRewards := sdict "type" "stack" }}
	{{ with dbGet 0 "roleRewards" }} {{ $roleRewards = sdict .Value }} {{ end }}
	{{ $type := $roleRewards.type }}
	{{ $toAdd := 0 }}
	{{ $dist := -1 }}
	{{ range $level, $reward := $roleRewards }}
		{{ if and (le (toInt $level) (toInt $newLvl)) (or (gt $dist (sub (toInt $newLvl) (toInt $level))) (eq $dist -1)) (eq $type "highest") }}
			{{ $dist = sub (toInt $newLvl) (toInt $level) }} {{ $toAdd = $reward }}
		{{end}}
		{{ if and (ge (toInt $newLvl) (toInt $level)) (not (targetHasRoleID $user $reward)) (eq $type "stack") (ne $level "type") }} {{ giveRoleID $user $reward }}
		{{ else if and (targetHasRoleID $user $reward) (eq $type "highest") }} {{ takeRoleID $user $reward }} {{ end }}
	{{end}}

	{{if $toAdd}} {{ giveRoleID $user $toAdd }} {{end}}
{{end}}
