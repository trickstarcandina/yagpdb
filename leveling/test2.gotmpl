{{$PageNo := 0}}
{{$ExecCall := 0}}
{{$PageData := 0}}
{{$embed := ""}}
{{$MsgID := 0}}

{{/*Check if command is triggered by reaction or execCC and accordingly initialize variables*/}}
{{if .ExecData}}
     {{$PageData = .ExecData.Category}}
     {{$PageNo = toInt (.ExecData.No)}}
     {{$MsgID = .ExecData.ID}}
     {{$ExecCall = 1}}
 {{else}}
     {{if .ReactionMessage.Embeds}}
          {{$embed = (index .ReactionMessage.Embeds 0)}}
          {{if and ($embed.Author) (ne .Reaction.UserID 204255221017214977) ($embed.Footer) }}
          {{if and ($embed.Author.Name) ($embed.Footer.Text) }}
          {{if (reFind "^(Page)" $embed.Footer.Text) }}
               {{$PageData = (dbGet 1234 (index (split $embed.Author.Name " ") 0 ) ).Value}}
               {{$PageNo = toInt ( index (split $embed.Footer.Text " ") 1 )}}
               {{$MsgID = .ReactionMessage.ID}}
          {{end}}
          {{end}}
          {{end}}
     {{end}}
{{end}}

{{/* if conditions are met for command to execute according to previously initialized variables , execute command depending on first run or Reaction (add/remove) Type */}}
{{if $PageData}}
{{$len := len $PageData}}
{{/* Code for displaying page for first run */}}
{{if $ExecCall}}
      {{addMessageReactions nil $MsgID "◀️" "▶️"}}
     {{editMessageNoEscape nil $MsgID (cembed (index $PageData (toString ($PageNo )) ) ) }}
{{/* Code to navigate through pages depending on reaction emoji type(name) */}}
{{else if and ( eq .Reaction.Emoji.Name "▶️") (lt $PageNo $len) }}
     {{editMessageNoEscape nil $MsgID (cembed (index $PageData (toString (add $PageNo 1) ) ) ) }}
{{else if and ( eq .Reaction.Emoji.Name "◀️") (gt $PageNo 1) }}
     {{editMessageNoEscape nil $MsgID (cembed (index $PageData (toString (add $PageNo -1) ) ) ) }}
{{end}}
{{end}}
